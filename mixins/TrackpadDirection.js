/*
 * Aspect which maps a horizontal trackpad swipe gesture (or horizontal mouse wheel
 * action) to direction semantics.
 *
 * To respond to the trackpad, we can listen to the DOM's "wheel" events. These
 * events are fired as the user drags their fingers across a trackpad.
 * Unfortunately, this scheme is missing a critical event — there is no event when
 * the user *stops* a gestured on the trackpad.
 *
 * To complicate matters, the mainstream browsers continue to generate wheel events
 * even after the user has stopped dragging their fingers. These fake events
 * simulate the user gradually slowing down the drag until they come to a smooth
 * stop. In some contexts, these fake wheel events might be helpful, but in trying
 * to supply typical trackpad swipe navigation, these fake events get in the way.
 *
 * This component uses some heuristics to work around these problems, but the
 * complex nature of the problem make it extremely difficult to achieve the same
 * degree of trackpad responsiveness possible with native applications.
 *
 * @class TrackpadDirection
 */

import Composable from 'Composable/src/Composable';


export default class TrackpadDirection {

  createdCallback() {
    this.addEventListener('wheel', event => {
      var handled = wheel(this, event);
      if (handled) {
        event.preventDefault();
      }
    });
    resetWheelTracking(this);
  }

  // Default implementations. These will typically be handled by other aspects
  // in the collective.
  goLeft() {}
  get position() {}
  set position(value) {}
  goRight() {}
  showTransition() {}

}
Composable.decorate.call(TrackpadDirection.prototype, {
  position: Composable.rule(Composable.rules.preferBaseGetter)
});


// Time we wait following a navigation before paying attention to wheel
// events again.
const POST_NAVIGATE_TIME = 250;

// Time we wait after the last wheel event before we reset things.
const WHEEL_TIME = 100;


// Following a navigation, partially reset our wheel tracking.
function postNavigate(element) {
  element.position = 0;
  element._wheelDistance = 0;
  element._postNavigateDelayComplete = true;
  element._absorbDeceleration = true;
  setTimeout(() => {
    element._postNavigateDelayComplete = false;
  }, POST_NAVIGATE_TIME);
}

// Reset all state related to the tracking of the wheel.
function resetWheelTracking(element) {
  element.position = 0;
  element._wheelDistance = 0;
  element._lastDeltaX = 0;
  element._absorbDeceleration = false;
  element._postNavigateDelayComplete = false;
  if (element._lastWheelTimeout) {
    clearTimeout(element._lastWheelTimeout);
    element._lastWheelTimeout = null;
  }
}

// Define our own sign function, since (as of May 2015), Safari and IE don't
// supply Math.sign().
function sign(x) {
  return (x === 0) ?
    0 :
    (x > 0) ?
      1 :
      -1;
}

// TODO: Damping, or some other treatment for going past the ends.

/*
 * A wheel event has been generated. This could be a real wheel event, or it
 * could be fake (see notes in the header).
 *
 * This handler uses several strategies to try to approximate native trackpad
 * swipe navigation.
 *
 * If the user has dragged enough to cause a navigation, then for a short
 * delay following that navigation, subsequent wheel events will be ignored.
 *
 * Furthermore, follwowing a navigation, we ignore all wheel events until we
 * receive at least one event where the event's deltaX (distance traveled) is
 * *greater* than the previous event's deltaX. This helps us filter out the
 * fake wheel events generated by the browser to simulate deceleration.
 *
 */
function wheel(element, event) {

  // Since we have a new wheel event, reset our timer waiting for the last
  // wheel event to pass.
  if (element._lastWheelTimeout) {
    clearTimeout(element._lastWheelTimeout);
  }
  element._lastWheelTimeout = setTimeout(() => {
    wheelTimedOut(element);
  }, WHEEL_TIME);

  var deltaX = event.deltaX;
  var deltaY = event.deltaY;

  // See if element event represents acceleration or deceleration.
  var acceleration = sign(deltaX) * (deltaX - element._lastDeltaX);
  element._lastDeltaX = deltaX;
  // console.log(deltaX + " " + acceleration + " " + element._absorbDeceleration + " " + element._postNavigateDelayComplete);

  if (Math.abs(deltaX) < Math.abs(deltaY)) {
    // Move was mostly vertical. The user may be trying scroll with the
    // trackpad/wheel. To be on the safe, we ignore such events.
    return false;
  }

  if (element._postNavigateDelayComplete) {
    // It's too soon after a navigation; ignore the event.
    return true;
  }


  if (acceleration > 0) {
    // The events are not (or are no longer) decelerating, so we can start
    // paying attention to them again.
    element._absorbDeceleration = false;
  } else if (element._absorbDeceleration) {
    // The wheel event was likely faked to simulate deceleration; ignore it.
    return true;
  }

  element._wheelDistance += deltaX;

  // Update the position of the items being navigated.
  var width = element.offsetWidth;
  var position = width > 0 ?
    element._wheelDistance / width :
    0;
  element.showTransition(false);
  position = sign(position) * Math.min(Math.abs(position), 1);
  element.position = position;

  // If the user has dragged enough to reach the previous/next item, then
  // complete a navigation to that item.
  if (position === 1) {
    // console.log("goRight");
    element.showTransition(true);
    element.goRight();
    postNavigate(element);
  } else if (position === -1) {
    // console.log("goLeft");
    element.showTransition(true);
    element.goLeft();
    postNavigate(element);
  }

  return true;
}

// A sufficiently long period of time has passed since the last wheel event.
// We snap the selection to the closest item, then reset our state.
function wheelTimedOut(element) {
  // console.log("timeout");

  // Snap to the closest item.
  element.showTransition(true);
  var position = element.position;
  if (position >= 0.5) {
    // console.log("snap right");
    element.goRight();
  } else if (position <= -0.5) {
    // console.log("snap left");
    element.goLeft();
  }

  // TODO: Listen for the transition to complete, and then restore
  // showTransition to false (or the previous value).

  resetWheelTracking(element);
}
